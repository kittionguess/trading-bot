import os
import requests
import time

# ‡∏î‡∏∂‡∏á Channel Access Token ‡∏à‡∏≤‡∏Å Environment Variable
CHANNEL_ACCESS_TOKEN = os.getenv('LINE_CHANNEL_ACCESS_TOKEN')

if not CHANNEL_ACCESS_TOKEN:
    raise Exception("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE_CHANNEL_ACCESS_TOKEN ‡πÄ‡∏õ‡πá‡∏ô Environment Variable")

# userId ‡∏´‡∏£‡∏∑‡∏≠ groupId ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ
TARGET_ID = os.getenv('LINE_TARGET_ID')  # ‡πÄ‡∏ä‡πà‡∏ô Uxxxxxxxxxx ‡∏´‡∏£‡∏∑‡∏≠ Cxxxxxxxxx

if not TARGET_ID:
    raise Exception("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE_TARGET_ID ‡πÄ‡∏õ‡πá‡∏ô Environment Variable")

def send_line_message(user_id, message):
    url = 'https://api.line.me/v2/bot/message/push'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {CHANNEL_ACCESS_TOKEN}'
    }
    data = {
        "to": user_id,
        "messages": [
            {
                "type": "text",
                "text": message
            }
        ]
    }
    response = requests.post(url, headers=headers, json=data)
    print(f'Status: {response.status_code}, Response: {response.text}')

def get_coingecko_prices(coin_id="bitcoin", days=1, interval="minute"):
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠ 1 ‡∏ô‡∏≤‡∏ó‡∏µ) ‡∏à‡∏≤‡∏Å CoinGecko
    url = f"https://api.coingecko.com/api/v3/coins/{coin_id}/market_chart?vs_currency=usd&days={days}&interval={interval}"
    res = requests.get(url)
    res.raise_for_status()
    data = res.json()
    prices = [price[1] for price in data["prices"]]  # [timestamp, price]
    return prices[-15:]  # ‡∏î‡∏∂‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 15 ‡∏à‡∏∏‡∏î (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Binance 14 ‡πÅ‡∏ó‡πà‡∏á)

def calculate_rsi(closes):
    gains = []
    losses = []
    for i in range(1, len(closes)):
        change = closes[i] - closes[i-1]
        if change > 0:
            gains.append(change)
            losses.append(0)
        else:
            gains.append(0)
            losses.append(abs(change))
    avg_gain = sum(gains) / len(gains) if gains else 0
    avg_loss = sum(losses) / len(losses) if losses else 0
    if avg_loss == 0:
        return 100
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def main():
    try:
        closes = get_coingecko_prices()
        rsi = calculate_rsi(closes)
        print(f"RSI = {rsi:.2f}")
        send_line_message(TARGET_ID, f"üìâ RSI ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 30 - ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ã‡∏∑‡πâ‡∏≠ BTC (RSI={rsi:.2f})")
        if rsi < 30:
            send_line_message(TARGET_ID, f"üìâ RSI ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 30 - ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ã‡∏∑‡πâ‡∏≠ BTC (RSI={rsi:.2f})")
        elif rsi > 70:
            send_line_message(TARGET_ID, f"üìà RSI ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 70 - ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏¢ BTC (RSI={rsi:.2f})")
        else:
            print("RSI ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏Å‡∏ï‡∏¥")

    except Exception as e:
        print("Error:", e)
        import traceback
        traceback.print_exc()        

if __name__ == "__main__":
    main()
