import os
import logging
import random
import time
from datetime import datetime, timedelta
from binance.spot import Spot as Client
from binance.lib.utils import config_logging
import requests
from bs4 import BeautifulSoup
import threading

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
config_logging(logging, logging.INFO)
logger = logging.getLogger()

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Environment Variables
BINANCE_API_KEY = os.getenv('BINANCE_API_KEY')
BINANCE_API_SECRET = os.getenv('BINANCE_API_SECRET')
LINE_CHANNEL_ACCESS_TOKEN = os.getenv('LINE_CHANNEL_ACCESS_TOKEN')
LINE_TARGET_ID = os.getenv('LINE_TARGET_ID')

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
if not all([BINANCE_API_KEY, BINANCE_API_SECRET, LINE_CHANNEL_ACCESS_TOKEN, LINE_TARGET_ID]):
    logger.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô")
    exit(1)

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ÂÖ®Â±Ä‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Proxy List
proxy_list = []
last_proxy_update = None
proxy_lock = threading.Lock()

def fetch_proxy_list():
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Proxy ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå ProxyNova"""
    global proxy_list, last_proxy_update
    
    try:
        url = "https://www.proxynova.com/proxy-server-list/"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'html.parser')
        new_proxy_list = []
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Proxy ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        table = soup.find('table', {'id': 'tbl_proxy_list'})
        if table:
            rows = table.find_all('tr')[1:]  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            for row in rows:
                cols = row.find_all('td')
                if len(cols) >= 2:
                    ip = cols[0].get_text().strip()
                    port = cols[1].get_text().strip()
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ IP ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                    if ip and port and ip.replace('.', '').isdigit():
                        new_proxy_list.append(f"http://{ip}:{port}")
        
        with proxy_lock:
            proxy_list = new_proxy_list
            last_proxy_update = datetime.now()
        
        logger.info(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Proxy List ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö {len(new_proxy_list)} ‡∏ï‡∏±‡∏ß")
        return new_proxy_list
        
    except Exception as e:
        logger.error(f"‡∏î‡∏∂‡∏á Proxy List ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {str(e)}")
        return []

def should_update_proxy_list():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Proxy List ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ó‡∏∏‡∏Å 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)"""
    global last_proxy_update
    if last_proxy_update is None:
        return True
    return datetime.now() - last_proxy_update > timedelta(hours=3)

def get_random_proxy():
    """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Proxy ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"""
    global proxy_list
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Proxy List ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏ö 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    if should_update_proxy_list():
        fetch_proxy_list()
    
    with proxy_lock:
        if proxy_list:
            proxy = random.choice(proxy_list)
            logger.info(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Proxy: {proxy}")
            return proxy
        return None

def create_binance_client():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Binance Client ‡∏û‡∏£‡πâ‡∏≠‡∏° Proxy"""
    proxy = get_random_proxy()
    proxies = {
        'http': proxy,
        'https': proxy
    } if proxy else None
    
    return Client(
        BINANCE_API_KEY,
        BINANCE_API_SECRET,
        proxies=proxies
    )

def send_line_message(message):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô LINE Notify"""
    url = 'https://api.line.me/v2/bot/message/push'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {LINE_CHANNEL_ACCESS_TOKEN}'
    }
    data = {
        "to": LINE_TARGET_ID,
        "messages": [{"type": "text", "text": message}]
    }
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=10)
        response.raise_for_status()
        logger.info(f"‡∏™‡πà‡∏á LINE ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {message}")
    except Exception as e:
        logger.error(f"‡∏™‡πà‡∏á LINE ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {str(e)}")

def get_binance_klines(symbol="BTCUSDT", interval="1m", limit=14, max_retries=3):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Binance ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"""
    for attempt in range(max_retries):
        try:
            client = create_binance_client()
            logger.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {symbol} {interval} (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt + 1})...")
            
            klines = client.klines(symbol, interval, limit=limit)
            
            if not klines or len(klines) < 2:
                logger.warning("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏à‡∏≤‡∏Å Binance API")
                continue
                
            return klines
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt + 1}: {str(e)}")
            if attempt < max_retries - 1:
                wait_time = (attempt + 1) * 5  # Exponential backoff
                logger.info(f"‡∏£‡∏≠ {wait_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á...")
                time.sleep(wait_time)
    
    logger.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏≠‡∏á {max_retries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    return None

def calculate_rsi(prices, period=14):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ RSI"""
    if len(prices) < period + 1:
        logger.warning("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì RSI")
        return 50
    
    deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
    
    gains = [delta if delta > 0 else 0 for delta in deltas]
    losses = [-delta if delta < 0 else 0 for delta in deltas]
    
    avg_gain = sum(gains[:period]) / period
    avg_loss = sum(losses[:period]) / period
    
    for i in range(period, len(gains)):
        avg_gain = (avg_gain * (period - 1) + gains[i]) / period
        avg_loss = (avg_loss * (period - 1) + losses[i]) / period
    
    if avg_loss == 0:
        return 100 if avg_gain != 0 else 50
    
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    
    return round(rsi, 2)

def main():
    try:
        # ‡∏î‡∏∂‡∏á Proxy List ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        fetch_proxy_list()
        
        while True:
            start_time = datetime.now()
            logger.info(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà {start_time}")
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Binance
            klines = get_binance_klines()
            
            if not klines:
                send_line_message("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Binance ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            else:
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î
                closes = [float(candle[4]) for candle in klines]
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì RSI
                rsi = calculate_rsi(closes)
                logger.info(f"RSI ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ: {rsi}")
                
                # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
                current_time = datetime.now().strftime('%H:%M')
                if rsi < 30:
                    message = f"üìâ RSI ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 30 - ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ã‡∏∑‡πâ‡∏≠ BTC\nRSI: {rsi}\n‡πÄ‡∏ß‡∏•‡∏≤: {current_time}"
                    send_line_message(message)
                elif rsi > 70:
                    message = f"üìà RSI ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 70 - ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≤‡∏¢ BTC\nRSI: {rsi}\n‡πÄ‡∏ß‡∏•‡∏≤: {current_time}"
                    send_line_message(message)
                else:
                    logger.info(f"RSI ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏Å‡∏ï‡∏¥: {rsi}")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            next_run = start_time + timedelta(hours=3)
            sleep_time = (next_run - datetime.now()).total_seconds()
            
            if sleep_time > 0:
                logger.info(f"‡∏£‡∏≠‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà {next_run} (‡∏≠‡∏µ‡∏Å {sleep_time/3600:.2f} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)")
                time.sleep(sleep_time)
            
    except Exception as e:
        logger.critical(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: {str(e)}", exc_info=True)
        send_line_message("‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RSI")

if __name__ == "__main__":
    main()
